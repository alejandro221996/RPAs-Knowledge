"""
Ejemplo 5: Automatizaci√≥n de Email
==================================

Este ejemplo demuestra c√≥mo automatizar el env√≠o y procesamiento de emails
usando la librer√≠a smtplib. Es √∫til para:
- Env√≠o autom√°tico de reportes por email
- Procesamiento de respuestas autom√°ticas
- Filtrado y clasificaci√≥n de emails
- Automatizaci√≥n de comunicaciones masivas
"""

import time
import random
import pandas as pd
import platform
import os
from datetime import datetime, timedelta
import smtplib
from email.mime.text import MIMEText
from email.mime.multipart import MIMEMultipart
from email.mime.base import MIMEBase
from email import encoders
import ssl
from dotenv import load_dotenv

# Cargar variables de entorno desde .env
load_dotenv()

class EmailAutomationRPA:
    def __init__(self):
        self.email_templates = {}
        self.recipients_data = []
        self.sent_emails = []
        self.setup_email_templates()
        self.generate_recipients_data()
        
    def setup_email_templates(self):
        """Configura plantillas de email para diferentes tipos"""
        print("üìß Configurando plantillas de email...")
        
        self.email_templates = {
            'ventas': """
Hola {nombre},

Adjunto encontrar√°s el reporte de ventas de Enero 2024.

**Resumen:**
- Ventas totales: ${ventas_totales:,.2f}
- Productos m√°s vendidos: {productos_top}
- Regi√≥n con mejor rendimiento: {region_top}

**An√°lisis:**
{analisis_ventas}

Si tienes alguna pregunta, no dudes en contactarme.

Saludos,
Sistema de Automatizaci√≥n RPA
            """,
            
            'inventario': """
Hola {nombre},

**ALERTA DE INVENTARIO - STOCK BAJO**

Los siguientes productos requieren atenci√≥n inmediata:

**Productos con stock bajo:**
{productos_stock_bajo}

**Recomendaciones:**
- Revisar proveedores
- Actualizar pedidos autom√°ticos
- Notificar al departamento de compras

**Stock actual vs. M√≠nimo:**
{comparacion_stock}

Por favor, toma las acciones necesarias.

Saludos,
Sistema de Automatizaci√≥n RPA
            """,
            
            'empleado': """
Hola {nombre},

**Notificaci√≥n de Empleado**

Se ha registrado una nueva actividad en tu cuenta:

**Detalles:**
- Fecha: {fecha_actividad}
- Tipo: {tipo_actividad}
- Departamento: {departamento}

**Acciones requeridas:**
{acciones_requeridas}

Si no reconoces esta actividad, contacta inmediatamente a IT.

Saludos,
Sistema de Automatizaci√≥n RPA
            """
        }
        
        print("‚úÖ Plantillas configuradas")
        
    def generate_recipients_data(self):
        """Genera datos de destinatarios de prueba"""
        print("üë• Generando datos de destinatarios...")
        
        self.recipients_data = [
            {
                'nombre': 'Ana Garc√≠a',
                'email': 'ana.garcia@empresa.com',
                'tipo': 'ventas',
                'ventas_totales': 125000.50,
                'productos_top': 'Laptop Pro, Mouse Wireless, Teclado RGB',
                'region_top': 'Norte',
                'analisis_ventas': 'Las ventas aumentaron 15% respecto al mes anterior. El producto estrella fue la Laptop Pro con 45 unidades vendidas.'
            },
            {
                'nombre': 'Carlos L√≥pez',
                'email': 'carlos.lopez@empresa.com',
                'tipo': 'inventario',
                'productos_stock_bajo': 'Laptop Pro (2 unidades), Mouse Wireless (5 unidades), Teclado RGB (3 unidades)',
                'comparacion_stock': 'Laptop Pro: 2/10, Mouse Wireless: 5/20, Teclado RGB: 3/15'
            },
            {
                'nombre': 'Mar√≠a Rodr√≠guez',
                'email': 'maria.rodriguez@empresa.com',
                'tipo': 'empleado',
                'fecha_actividad': '2024-01-15 14:30:00',
                'tipo_actividad': 'Inicio de sesi√≥n',
                'departamento': 'Recursos Humanos',
                'acciones_requeridas': 'Verificar actividad en el sistema de control de acceso.'
            }
        ]
        
        print(f"‚úÖ Generados {len(self.recipients_data)} destinatarios")
        
    def create_email_content(self, recipient_data):
        """Crea contenido de email personalizado"""
        template = self.email_templates.get(recipient_data['tipo'], '')
        return template.format(**recipient_data)
        
    def send_real_email(self, to_email, subject, content, attachment_path=None):
        """Env√≠a email real usando Mailtrap SMTP"""
        print(f"üì§ Enviando email real a: {to_email}")
        print(f"   üìß Asunto: {subject}")
        print(f"   üìÑ Contenido: {len(content)} caracteres")
        
        try:
            # Configuraci√≥n de Mailtrap (para testing seguro)
            smtp_host = os.getenv('MAILTRAP_HOST', 'smtp.mailtrap.io')
            smtp_port = int(os.getenv('MAILTRAP_PORT', '2525'))
            smtp_username = os.getenv('MAILTRAP_USERNAME', 'tu_usuario_mailtrap')
            smtp_password = os.getenv('MAILTRAP_PASSWORD', 'tu_password_mailtrap')
            
            # Email remitente (puede ser cualquiera para Mailtrap)
            sender_email = os.getenv('SENDER_EMAIL', 'rpa@empresa.com')
            
            # Crear mensaje
            message = MIMEMultipart()
            message["From"] = sender_email
            message["To"] = to_email
            message["Subject"] = subject
            
            # Agregar cuerpo del email
            message.attach(MIMEText(content, "plain"))
            
            # Agregar adjunto si existe
            if attachment_path and os.path.exists(attachment_path):
                print(f"   üìé Adjuntando: {attachment_path}")
                with open(attachment_path, "rb") as attachment:
                    part = MIMEBase("application", "octet-stream")
                    part.set_payload(attachment.read())
                    
                encoders.encode_base64(part)
                part.add_header(
                    "Content-Disposition",
                    f"attachment; filename= {os.path.basename(attachment_path)}",
                )
                message.attach(part)
            
            # Enviar email usando Mailtrap
            print(f"   üîó Conectando a Mailtrap: {smtp_host}:{smtp_port}")
            
            # Intentar con TLS primero
            try:
                context = ssl.create_default_context()
                with smtplib.SMTP(smtp_host, smtp_port) as server:
                    server.starttls(context=context)
                    server.login(smtp_username, smtp_password)
                    server.sendmail(sender_email, to_email, message.as_string())
                    print("   ‚úÖ Email enviado exitosamente via TLS")
                    return True
                    
            except Exception as tls_error:
                print(f"   ‚ö†Ô∏è TLS fall√≥, intentando sin TLS: {tls_error}")
                # Intentar sin TLS
                try:
                    with smtplib.SMTP(smtp_host, smtp_port) as server:
                        server.login(smtp_username, smtp_password)
                        server.sendmail(sender_email, to_email, message.as_string())
                        print("   ‚úÖ Email enviado exitosamente sin TLS")
                        return True
                        
                except Exception as no_tls_error:
                    print(f"   ‚ùå Error sin TLS: {no_tls_error}")
                    raise no_tls_error
                    
        except Exception as e:
            print(f"   ‚ùå Error al enviar email real: {e}")
            print("   üîÑ Cambiando a modo simulaci√≥n...")
            return self.send_email_simulation(to_email, subject, content, attachment_path)
            
    def send_email_simulation(self, to_email, subject, content, attachment_path=None):
        """Simula el env√≠o de email (fallback cuando no hay configuraci√≥n real)"""
        print(f"üì§ Simulando env√≠o de email a: {to_email}")
        print(f"   üìß Asunto: {subject}")
        print(f"   üìÑ Contenido: {len(content)} caracteres")
        
        if attachment_path:
            print(f"   üìé Adjunto: {attachment_path}")
            
        # Simular tiempo de env√≠o
        time.sleep(1)
        
        # Simular √©xito/fallo aleatorio
        success = random.random() > 0.1  # 90% de √©xito
        
        if success:
            print("   ‚úÖ Email enviado exitosamente")
            return True
        else:
            print("   ‚ùå Error al enviar email")
            return False
            
    def send_bulk_emails(self):
        """Env√≠a emails masivos a todos los destinatarios"""
        print("\nüìß Iniciando env√≠o masivo de emails...")
        
        successful_sends = 0
        failed_sends = 0
        
        for i, recipient in enumerate(self.recipients_data, 1):
            print(f"\n--- Enviando email {i}/{len(self.recipients_data)} ---")
            
            # Crear contenido del email
            content = self.create_email_content(recipient)
            
            # Determinar asunto basado en el tipo
            subject_map = {
                'ventas': 'Reporte de Ventas - Enero 2024',
                'inventario': 'Alerta de Inventario - Stock Bajo',
                'empleado': 'Notificaci√≥n de Empleado'
            }
            subject = subject_map.get(recipient['tipo'], 'Notificaci√≥n Autom√°tica')
            
            # Simular adjunto si es necesario
            attachment = None
            if recipient['tipo'] == 'ventas':
                attachment = f"reportes/reporte_ventas_{datetime.now().strftime('%Y%m%d')}.xlsx"
                
            # Enviar email (intenta real, fallback a simulaci√≥n)
            success = self.send_real_email(
                recipient['email'],
                subject,
                content,
                attachment
            )
            
            # Registrar resultado
            email_record = {
                'destinatario': recipient['email'],
                'nombre': recipient['nombre'],
                'tipo': recipient['tipo'],
                'asunto': subject,
                'fecha_envio': datetime.now().strftime('%Y-%m-%d %H:%M:%S'),
                'estado': 'Enviado' if success else 'Fallido',
                'adjunto': attachment
            }
            
            self.sent_emails.append(email_record)
            
            if success:
                successful_sends += 1
            else:
                failed_sends += 1
                
        print(f"\nüìä Resumen de env√≠o:")
        print(f"   ‚úÖ Enviados exitosamente: {successful_sends}")
        print(f"   ‚ùå Fallidos: {failed_sends}")
        print(f"   üìß Total: {len(self.recipients_data)}")
        
    def process_email_responses(self):
        """Simula el procesamiento de respuestas autom√°ticas"""
        print("\nüì® Procesando respuestas autom√°ticas...")
        
        # Simular respuestas recibidas
        responses = [
            {
                'from': 'gerente@empresa.com',
                'subject': 'Re: Reporte de Ventas - Enero 2024',
                'content': 'Gracias por el reporte. Necesito m√°s detalles sobre la regi√≥n Norte.',
                'timestamp': datetime.now() - timedelta(hours=2)
            },
            {
                'from': 'inventario@empresa.com',
                'subject': 'Re: Alerta de Inventario - Stock Bajo',
                'content': 'Entendido. Ya he contactado a los proveedores para reabastecer.',
                'timestamp': datetime.now() - timedelta(hours=1)
            },
            {
                'from': 'empleado1@empresa.com',
                'subject': 'Re: Notificaci√≥n de Empleado',
                'content': 'Confirmado. Todo en orden.',
                'timestamp': datetime.now() - timedelta(minutes=30)
            }
        ]
        
        print(f"   üì• Procesando {len(responses)} respuestas...")
        
        for i, response in enumerate(responses, 1):
            print(f"   üì® Respuesta {i}: {response['from']} - {response['subject']}")
            
            # Simular an√°lisis de sentimiento b√°sico
            if 'gracias' in response['content'].lower():
                sentiment = 'Positivo'
            elif 'problema' in response['content'].lower():
                sentiment = 'Negativo'
            else:
                sentiment = 'Neutral'
                
            print(f"      üí≠ Sentimiento: {sentiment}")
            
        print("   ‚úÖ Procesamiento de respuestas completado")
        
    def filter_emails(self):
        """Simula el filtrado y clasificaci√≥n de emails"""
        print("\nüîç Filtrado y clasificaci√≥n de emails...")
        
        # Simular emails recibidos
        incoming_emails = [
            {'from': 'cliente1@empresa.com', 'subject': 'Consulta sobre producto', 'priority': 'Alta'},
            {'from': 'spam@fake.com', 'subject': 'Ganar dinero r√°pido', 'priority': 'Baja'},
            {'from': 'proveedor@empresa.com', 'subject': 'Confirmaci√≥n de pedido', 'priority': 'Media'},
            {'from': 'soporte@empresa.com', 'subject': 'Ticket #12345', 'priority': 'Alta'},
            {'from': 'newsletter@empresa.com', 'subject': 'Bolet√≠n semanal', 'priority': 'Baja'}
        ]
        
        print(f"   üì• Procesando {len(incoming_emails)} emails...")
        
        # Clasificar emails
        high_priority = []
        medium_priority = []
        low_priority = []
        spam = []
        
        for email in incoming_emails:
            if email['priority'] == 'Alta':
                high_priority.append(email)
            elif email['priority'] == 'Media':
                medium_priority.append(email)
            elif 'spam' in email['from'].lower() or 'ganar dinero' in email['subject'].lower():
                spam.append(email)
            else:
                low_priority.append(email)
                
        print(f"   üìä Clasificaci√≥n completada:")
        print(f"      üî¥ Alta prioridad: {len(high_priority)}")
        print(f"      üü° Media prioridad: {len(medium_priority)}")
        print(f"      üü¢ Baja prioridad: {len(low_priority)}")
        print(f"      üö´ Spam: {len(spam)}")
        
    def save_email_log(self, filename="log_emails.xlsx"):
        """Guarda el log de emails enviados"""
        print(f"\nüíæ Guardando log de emails en {filename}...")
        
        if not self.sent_emails:
            print("   ‚ö†Ô∏è No hay emails para guardar")
            return
            
        df = pd.DataFrame(self.sent_emails)
        df.to_excel(filename, index=False, engine='openpyxl')
        print(f"   ‚úÖ Log guardado exitosamente")
        
        # Mostrar estad√≠sticas
        print(f"\nüìä Estad√≠sticas de emails:")
        print(f"   üìß Total enviados: {len(self.sent_emails)}")
        
        # Estad√≠sticas por tipo
        tipo_counts = df['tipo'].value_counts()
        for tipo, count in tipo_counts.items():
            print(f"   üìã {tipo.capitalize()}: {count}")
            
        # Estad√≠sticas por estado
        estado_counts = df['estado'].value_counts()
        for estado, count in estado_counts.items():
            print(f"   üìà {estado}: {count}")
            
    def run_email_automation(self):
        """Ejecuta el proceso completo de automatizaci√≥n de email"""
        print("üöÄ Iniciando proceso de Automatizaci√≥n de Email RPA")
        print("=" * 60)
        
        try:
            # 1. Configurar plantillas
            self.setup_email_templates()
            
            # 2. Generar datos de destinatarios
            self.generate_recipients_data()
            
            # 3. Enviar emails masivos
            self.send_bulk_emails()
            
            # 4. Procesar respuestas
            self.process_email_responses()
            
            # 5. Filtrar emails
            self.filter_emails()
            
            # 6. Guardar log
            self.save_email_log()
            
            print("\nüéâ Proceso de automatizaci√≥n de email completado!")
            print(f"üìß Total de emails procesados: {len(self.sent_emails)}")
            
        except Exception as e:
            print(f"‚ùå Error en el proceso: {e}")

def main():
    """Funci√≥n principal para ejecutar el ejemplo"""
    print("ü§ñ RPA Email Automation - Ejemplo de Automatizaci√≥n de Email")
    print("=" * 60)
    
    # Crear instancia del bot
    email_bot = EmailAutomationRPA()
    
    # Ejecutar proceso completo
    email_bot.run_email_automation()

if __name__ == "__main__":
    main() 